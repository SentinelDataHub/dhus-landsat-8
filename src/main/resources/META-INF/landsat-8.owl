<?xml version="1.0"?>
<!--
  Data HUb Service (DHuS) - For Space data distribution.
  Copyright (C) 2017 European Space Agency (ESA)
  Copyright (C) 2017 GAEL Systems
  Copyright (C) 2017 Serco Spa

  This file is part of DHuS software sources.

  This program is free software: you can redistribute it and/or modify
  it under the terms of the GNU Affero General Public License as
  published by the Free Software Foundation, either version 3 of the
  License, or (at your option) any later version.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
  GNU Affero General Public License for more details.

  You should have received a copy of the GNU Affero General Public License
  along with this program. If not, see <http://www.gnu.org/licenses/>.

-->
<!DOCTYPE rdf:RDF [
   <!ENTITY rdf     "http://www.w3.org/1999/02/22-rdf-syntax-ns#">
   <!ENTITY rdfs    "http://www.w3.org/2000/01/rdf-schema#">
   <!ENTITY owl     "http://www.w3.org/2002/07/owl#">
   <!ENTITY landsat "http://landsat.usgs.gov#">
   <!ENTITY drb     "http://www.gael.fr/drb#">
   <!ENTITY dhus    "http://www.gael.fr/dhus#">
   ]>

<rdf:RDF xmlns:owl    ="&owl;"
         xmlns:rdf    ="&rdf;"
         xmlns:rdfs   ="&rdfs;"
         xmlns:drb    ="&drb;"
         xmlns:landsat="&landsat;"
         xmlns:dhus   ="&dhus;"
         xml:base     ="&landsat;">

   <owl:Ontology rdf:about="&landsat;"/>

   <!-- Landsat-8 PRODUCT  -->
   <rdf:Description rdf:about="&landsat;landsat8GeoTiffProductFolder">
      <dhus:metadataTypes rdf:parseType="Literal">

         <metadataType id="generationTime"
                       name="Generation time"
                       contentType="text/plain"
                       category="product">
         </metadataType>

         <metadataType id="format"
                       name="Format"
                       contentType="text/plain"
                       category="product">
            <solrField name="format"
                       type="string"
                       required="true"/>
         </metadataType>

         <metadataType id="size"
                       name="Size"
                       contentType="text/plain"
                       category="summary">
            <solrField name="size"
                       type="string"/>
         </metadataType>

         <metadataType id="mission"
                       name="Mission"
                       contentType="text/plain"
                       category="product">
            <solrField name="mission"
                       type="string"/>
         </metadataType>

         <metadataType id="platformName"
                       name="Platform name"
                       contentType="text/plain"
                       category="platform">
            <solrField name="platformname"
                       type="text_general"/>
         </metadataType>

         <metadataType id="platformShortName"
                       name="Platform short name"
                       contentType="text/plain"
                       category="platform">
            <solrField name="platformshortname"
                       type="text_general"/>
         </metadataType>

         <metadataType id="platformNumber"
                       name="Platform number"
                       contentType="text/plain"
                       category="platform">
         </metadataType>

         <metadataType id="filename"
                       name="Filename"
                       contentType="text/plain"
                       category="summary">
            <solrField name="filename"
                       type="string"
                       required="true"/>
         </metadataType>

         <metadataType id="platformSerialIdentifier"
                       name="Platform serial identifier"
                       contentType="text/plain"
                       category="platform">
            <solrField name="platformserialidentifier"
                       type="text_general"/>
         </metadataType>

         <metadataType id="instrumentName"
                       name="Instrument name"
                       contentType="text/plain"
                       category="instrument">
            <solrField name="instrumentname"
                       type="text_general"/>
         </metadataType>

         <metadataType id="instrumentShortName"
                       name="Instrument short name"
                       contentType="text/plain"
                       category="instrument">
            <solrField name="instrumentshortname"
                       type="text_general"/>
         </metadataType>

         <metadataType id="beginPosition"
                       name="Sensing start"
                       contentType="text/date+iso8601"
                       category="product">
            <solrField name="beginposition"
                       type="tdate"/>
         </metadataType>

         <metadataType id="endPosition"
                       name="Sensing stop"
                       contentType="text/date+iso8601"
                       category="product">
            <solrField name="endposition"
                       type="tdate"/>
         </metadataType>

         <metadataType id="productType"
                       name="Product type"
                       contentType="text/plain"
                       category="product">
            <solrField name="producttype"
                       type="text_general"/>
         </metadataType>

         <metadataType id="cloudCoverPercentage"
                       name="Cloud cover percentage"
                       contentType="text/plain"
                       category="product">
            <solrField name="cloudcoverpercentage"
                       type="double"/>
         </metadataType>

         <metadataType id="utmZome"
                       name="UTM Zone"
                       contentType="text/plain"
                       category="product">
         </metadataType>

<!--
         <metadataType id="coordinates"
                       name="Coordinates"
                       contentType="application/wkt"
                       category="product">
            <solrField name="coordinates"
                       type="location_rpt"/>
         </metadataType>
-->

         <metadataType id="GMLfootprint"
                       name="Footprint"
                       contentType="application/gml+xml"
                       category="product">
            <solrField name="gmlfootprint"
                       type="string"/>
         </metadataType>

         <metadataType id="footprint"
                       name="JTS footprint"
                       contentType="application/jts"
                       category="product">
            <solrField name="footprint"
                       type="location_rpt"/>
         </metadataType>

      </dhus:metadataTypes>
   </rdf:Description>

   <!-- Landsat-8 PRODUCT  -->
   <rdf:Description rdf:about="&landsat;landsat8GeoTiffProductFolder">
      <dhus:support/>
      <dhus:identifier rdf:parseType="Literal">
      <![CDATA[
         name(.)
      ]]>
      </dhus:identifier>

      <dhus:metadataExtractor  rdf:parseType="Literal">
      <![CDATA[
         declare function local:computeSizes ($path, $base as item()*) as item()*
         {
            for $child in $path/*
            return
               if ($child/@directory)
               then
                  local:computeSizes ($child, base)
               else
                  fn:data($child/@size), $base
         };

         declare function local:round-half-down($arg, $precision) as xs:double*
         {
            xs:integer((xs:double($arg)*math:power(10, $precision))) div 
               math:power(10, $precision)
         };

         let $name := name(.)

         let $mtlFile := *[fn:matches(fn:name(),"(?i)L(O|T|C)8[0-9]{13}....._MTL\.txt")]
         let $l1MetadataFile := $mtlFile/l1MetadataFile
         let $productMetadata := $l1MetadataFile/productMetadata
         let $metadataFileInfo := $l1MetadataFile/metadataFileInfo

         (: In the product, there is only the scene center time,
            no sensing start and stop :)
         let $Var_Time_Position :=
            fn:concat(fn:data($productMetadata/dateAcquired),
                      "T", fn:data($productMetadata/sceneCenterTime))

         return
         (
         <!-- Indexed metadata -->

         <!-- GENERATION TIME -->
         <metadata name="Generation time"
                   category="product" type="text/plain">
         { data($metadataFileInfo/fileDate) }
         </metadata>,

         <!-- FORMAT -->
         <metadata queryable="format" name="Format"
                   category="product" type="text/plain">
            GEOTIFF
         </metadata>,

         <!-- SIZE -->
         <metadata queryable="size" name="Size"
                   category="summary" type="text/plain">
         {
            let $size := xs:double(fn:sum(local:computeSizes(., ())))
            let $kilo := 1024
            let $mega := xs:integer($kilo * 1024)
            let $giga := xs:integer($mega * 1024)
            let $tera := xs:integer($giga * 1024)
            let $kilo_size := local:round-half-down(($size div $kilo), 2)
            let $mega_size := local:round-half-down(($size div $mega), 2)
            let $giga_size := local:round-half-down(($size div $giga), 2)
            let $tera_size := local:round-half-down(($size div $tera), 2)
            return
               if ($size < 1024)
               then
                  concat ($size, " bytes")
               else
                  if (($size div $kilo) < 1024)
                  then
                     concat ($kilo_size, " KB")
                  else
                     if (($size div $mega) < 1024)
                        then
                           concat ($mega_size, " MB")
                     else
                        if (($size div $giga) < 1024)
                        then
                           concat ($giga_size, " GB")
                        else 
                           concat ($tera_size, " TB")
         }
         </metadata>,

         <!-- MISSION NAME -->
         <metadata queryable="mission" name="Mission"
                   category="platform" type="text/plain">
            Landsat
         </metadata>,

         <!-- PLATFORM NAME -->
         <metadata queryable="platformname" name="Platform name"
                   category="platform" type="text/plain">
            Landsat-8
         </metadata>,

         <!-- PLATFORM SHORT NAME -->
         <metadata queryable="platformshortname" name="Platform short name"
                   category="platform" type="text/plain">
            LS-8
         </metadata>,

         <!-- PLATFORM NUMBER -->
         <metadata name="Platform number"
                   category="platform" type="text/plain">
            8
         </metadata>,

         <!-- FILENAME -->
         <metadata queryable="filename" name="Filename"
                   category="summary" type="text/plain">
         { $name }
         </metadata>,

         <!-- PLATFORM NSSDC IDENTIFIER -->
         <metadata queryable="platformserialidentifier" name="Platform serial identifier"
                   category="platform" type="text/plain">
            2013-008A
         </metadata>,

         <!-- INSTRUMENT NAME -->
         <metadata queryable="instrumentname" name="Instrument name"
                   category="instrument" type="text/plain">
         {
            let $var_sensor := fn:substring($name, 2, 1)
            return
               if (matches($var_sensor, "O"))
               then "Operational Land Imager"
               else
                  if (matches($var_sensor, "T"))
                  then "Thermal Infrared Sensor"
                  else
                     if (matches($var_sensor, "C"))
                     then "Combined Operational Land Imager and Thermal Infrared Sensor"
                     else ""
         }
         </metadata>,

         <!-- INSTRUMENT SHORT NAME -->
         <metadata queryable="instrumentshortname" name="Instrument short name"
                   category="instrument" type="text/plain">
         {
            let $var_sensor := fn:substring($name, 2, 1)
            return
               if (matches($var_sensor, "O"))
               then "OLI"
               else
                  if (matches($var_sensor, "T"))
                  then "TIRS"
                  else
                     if (matches($var_sensor, "C"))
                     then "TIRS+OLI"
                     else ""
         }
         </metadata>,

         <!-- BEGIN POSITION -->
         <metadata queryable="beginposition" name="Sensing start"
                   category="product" type="text/plain">
         {
            $Var_Time_Position
         }
         </metadata>,

         <!-- SENSING STOP -->
         <metadata queryable="endposition" name="Sensing stop"
                   category="product" type="text/date+iso8601">
         {
            $Var_Time_Position
         }
         </metadata>,

         <!-- PRODUCT TYPE -->
         <metadata queryable="producttype" name="Product type"
                   category="product" type="text/plain">
         {
            fn:data($productMetadata/dataType)
         }
         </metadata>,

         <!-- CLOUD COVER PERCENTAGE -->
         <metadata queryable="cloudcoverpercentage" name="Cloud cover percentage"
                   category="product" type="text/plain">
         {
            fn:data($l1MetadataFile/imageAttributes/cloudCover)
         }
         </metadata>,

         <!-- UTM ZONE -->
         <metadata name="UTM Zone"
                   category="product" type="text/plain">
         {
            fn:data($l1MetadataFile/projectionParameters/utmZone)
         }
         </metadata>,

         <!-- COORDINATES -->
<!--
         <metadata queryable="coordinates" name="Coordinates"
                   category="product" type="application/wkt">
         {
            let $ulLat := data($productMetadata/cornerUlLatProduct)
            let $ulLon := data($productMetadata/cornerUlLonProduct)
            let $urLat := data($productMetadata/cornerUrLatProduct)
            let $urLon := data($productMetadata/cornerUrLonProduct)
            let $llLat := data($productMetadata/cornerLlLatProduct)
            let $llLon := data($productMetadata/cornerLlLonProduct)
            let $lrLat := data($productMetadata/cornerLrLatProduct)
            let $lrLon := data($productMetadata/cornerLrLonProduct)
            return 
               if (($ulLat, $ulLon, $urLat, $urLon, $llLat, $llLon, $lrLat, $lrLon))
               then
                  concat("POLYGON ((",
                         $ulLon, " ", $ulLat, ",",
                         $llLon, " ", $llLat, ",",
                         $lrLon, " ", $lrLat, ",",
                         $urLon, " ", $urLat, ",",
                         $ulLon, " ", $ulLat, 
                         "))")
               else ""
         }
         </metadata>
-->

         <!-- GML FOOTPRINT -->
         <metadata queryable="gmlfootprint" name="Footprint"
                   category="product" type="application/gml+xml">
            <gml:Polygon xmlns:gml="http://www.opengis.net/gml"
                         srsName="http://www.opengis.net/gml/srs/epsg.xml#4326">
               <gml:outerBoundaryIs>
                  <gml:LinearRing>
                     <gml:coordinates>
                     {
                        let $ulLat := data($productMetadata/cornerUlLatProduct)
                        let $ulLon := data($productMetadata/cornerUlLonProduct)
                        let $urLat := data($productMetadata/cornerUrLatProduct)
                        let $urLon := data($productMetadata/cornerUrLonProduct)
                        let $llLat := data($productMetadata/cornerLlLatProduct)
                        let $llLon := data($productMetadata/cornerLlLonProduct)
                        let $lrLat := data($productMetadata/cornerLrLatProduct)
                        let $lrLon := data($productMetadata/cornerLrLonProduct)
                        return 
                           if (($ulLat, $ulLon, $urLat, $urLon, $llLat, $llLon, $lrLat, $lrLon))
                           then
                           concat (
                              data($ulLat), ",", data($ulLon), " ",
                              data($llLat), ",", data($llLon), " ",
                              data($lrLat), ",", data($lrLon), " ",
                              data($urLat), ",", data($urLon), " ",
                              data($ulLat), ",", data($ulLon))
                           else ""
                     }
                     </gml:coordinates>
                  </gml:LinearRing>
               </gml:outerBoundaryIs>
            </gml:Polygon>
         </metadata>,

         <!-- JTS FOOTPRINT -->
         <metadata
            queryable="footprint"
            category="product"
            name="JTS footprint"
            type="application/jts">
            {
               let $ulLat := data($productMetadata/cornerUlLatProduct)
               let $ulLon := data($productMetadata/cornerUlLonProduct)
               let $urLat := data($productMetadata/cornerUrLatProduct)
               let $urLon := data($productMetadata/cornerUrLonProduct)
               let $llLat := data($productMetadata/cornerLlLatProduct)
               let $llLon := data($productMetadata/cornerLlLonProduct)
               let $lrLat := data($productMetadata/cornerLrLatProduct)
               let $lrLon := data($productMetadata/cornerLrLonProduct)
               return 
                  if (($ulLat, $ulLon, $urLat, $urLon, $llLat, $llLon, $lrLat, $lrLon))
                  then
                     concat("POLYGON ((",
                            data($ulLon), " ", data($ulLat), ",",
                            data($llLon), " ", data($llLat), ",",
                            data($lrLon), " ", data($lrLat), ",",
                            data($urLon), " ", data($urLat), ",",
                            data($ulLon), " ", data($ulLat),
                            "))")
                  else ""
            }
         </metadata>

      )
      ]]>
      </dhus:metadataExtractor>
   </rdf:Description>

</rdf:RDF>
